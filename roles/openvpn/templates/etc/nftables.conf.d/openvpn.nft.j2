## build rules for vpn server (encrypted traffic)
# build set of vpn_outer_interfaces
add set inet filter vpn_server_interfaces { type ifname; }

{% for iface in openvpn_server_interfaces %}
add element inet filter vpn_server_interfaces { {{ iface }} }
{% endfor %}

# Stateless rules for base vpn traffic
add rule inet filter input_apprules  meta iifname @vpn_server_interfaces udp dport { {{ openvpn_port }} } counter accept comment "input vpn"
add rule inet filter output_apprules meta oifname @vpn_server_interfaces udp sport { {{ openvpn_port }} } counter accept comment "output vpn"

## build rules for vpn clients (decrypted traffic) to local services
# ALL vpn clients are reachable via ssh
add rule inet filter forward_apprules meta oifname tun0 tcp dport { 22, 2222 } ct state new counter accept comment "forward ssh to vpn client"

# map vpn client names (from certificates) (file is updated automatically from systemd openvpnmapping.path)
include "/etc/nftables.conf.d/clients.openvpn"

# sets for selected targets (smb, imaps, nextcloud)
add set inet filter vpn_smb_targets_v4 { type ipv4_addr ; }
add set inet filter vpn_smb_targets_v6 { type ipv6_addr ; }
{% for ip in openvpn_nft_targets_smb.v4info %}
add element inet filter vpn_smb_targets_v4 { {{ ip }} }
{% endfor %}
{% if openvpn_nft_targets_smb.v6info is defined %}
{% for ip in openvpn_nft_targets_smb.v6info %}
add element inet filter vpn_smb_targets_v6 { {{ ip }} }
{% endfor %}
{% endif %}

add set inet filter vpn_imaps_targets_v4 { type ipv4_addr ; }
add set inet filter vpn_imaps_targets_v6 { type ipv6_addr ; }
{% for ip in openvpn_nft_targets_imaps.v4info %}
add element inet filter vpn_imaps_targets_v4 { {{ ip }} }
{% endfor %}
{% if openvpn_nft_targets_imaps.v6info is defined %}
{% for ip in openvpn_nft_targets_imaps.v6info %}
add element inet filter vpn_imaps_targets_v6 { {{ ip }} }
{% endfor %}
{% endif %}

add set inet filter vpn_nextcloud_targets_v4 { type ipv4_addr ; }
add set inet filter vpn_nextcloud_targets_v6 { type ipv6_addr ; }
{% for ip in openvpn_nft_targets_nextcloud.v4info %}
add element inet filter vpn_nextcloud_targets_v4 { {{ ip }} }
{% endfor %}
{% if openvpn_nft_targets_nextcloud.v6info is defined %}
{% for ip in openvpn_nft_targets_nextcloud.v6info %}
add element inet filter vpn_nextcloud_targets_v6 { {{ ip }} }
{% endfor %}
{% endif %}

# create empty source IP sets for all rules
add set inet filter from_vpn_to_localhost_dns_v4 { type ipv4_addr ; }
add set inet filter from_vpn_to_localhost_dns_v6 { type ipv6_addr ; }
add set inet filter from_vpn_to_localhost_ssh_v4 { type ipv4_addr ; }
add set inet filter from_vpn_to_localhost_ssh_v6 { type ipv6_addr ; }
add set inet filter from_vpn_to_localhost_unifi_v4 { type ipv4_addr ; }
add set inet filter from_vpn_to_localhost_unifi_v6 { type ipv6_addr ; }
add set inet filter from_vpn_to_localnet_ssh_v4 { type ipv4_addr ; }
add set inet filter from_vpn_to_localnet_ssh_v6 { type ipv6_addr ; }
add set inet filter from_vpn_to_localnet_smb_v4 { type ipv4_addr ; }
add set inet filter from_vpn_to_localnet_smb_v6 { type ipv6_addr ; }
add set inet filter from_vpn_to_localnet_music_v4 { type ipv4_addr ; }
add set inet filter from_vpn_to_localnet_music_v6 { type ipv6_addr ; }
add set inet filter from_vpn_to_localnet_imaps_v4 { type ipv4_addr ; }
add set inet filter from_vpn_to_localnet_imaps_v6 { type ipv6_addr ; }
add set inet filter from_vpn_to_localnet_nextcloud_v4 { type ipv4_addr ; }
add set inet filter from_vpn_to_localnet_nextcloud_v6 { type ipv6_addr ; }
add set inet filter from_vpn_to_vpn_unifi_v4 { type ipv4_addr ; }
add set inet filter from_vpn_to_vpn_unifi_v6 { type ipv6_addr ; }
# to be continued...

# map client names to the host sets for the service specific rules
{% for ruleset in openvpn_nft_client_rules %}
{% for clientname in ruleset.clients %}
add element inet filter from_vpn_to_{{ ruleset.name }}_v4 { ${{ clientname }}_v4 }
add element inet filter from_vpn_to_{{ ruleset.name }}_v6 { ${{ clientname }}_v6 }
{% endfor %}
{% endfor %}

add set inet filter to_vpn_client_nbd { type ipv4_addr ; }
add set inet filter to_vpn_client_unifi { type ipv4_addr ; }
{% for ruleset in openvpn_nft_service_rules %}
{% for clientname in ruleset.clients %}
add element inet filter to_vpn_{{ ruleset.name }} { ${{ clientname }}_v4 }
{% endfor %}
{% endfor %}

# Stateful input rule to enable whitelisted vpn clients to use the localhost services
add rule inet filter input_apprules meta iifname tun0 ip saddr @from_vpn_to_localhost_dns_v4 udp dport { 53 } ct state new counter accept comment "input vpn client dns udp v4"
add rule inet filter input_apprules meta iifname tun0 ip6 saddr @from_vpn_to_localhost_dns_v6 udp dport { 53 } ct state new counter accept comment "input vpn client dns udp v6"
add rule inet filter input_apprules meta iifname tun0 ip saddr @from_vpn_to_localhost_dns_v4 tcp dport { 53 } ct state new counter accept comment "input vpn client dns tcp v4"
add rule inet filter input_apprules meta iifname tun0 ip6 saddr @from_vpn_to_localhost_dns_v6 tcp dport { 53 } ct state new counter accept comment "input vpn client dns tcp v6"
add rule inet filter input_apprules meta iifname tun0 ip saddr @from_vpn_to_localhost_ssh_v4 tcp dport { 22 } ct state new counter accept comment "input vpn client ssh tcp v4"
add rule inet filter input_apprules meta iifname tun0 ip6 saddr @from_vpn_to_localhost_ssh_v6 tcp dport { 22 } ct state new counter accept comment "input vpn client ssh tcp v6"
add rule inet filter input_apprules meta iifname tun0 ip saddr @from_vpn_to_localhost_unifi_v4 tcp dport { 8443 } ct state new counter accept comment "input vpn client unifi tcp v4"
add rule inet filter input_apprules meta iifname tun0 ip6 saddr @from_vpn_to_localhost_unifi_v6 tcp dport { 8443 } ct state new counter accept comment "input vpn client unifi tcp v6"
# Stateful forward rules to enable whitelisted vpn clients to use services on localnets
add rule inet filter forward_apprules meta iifname tun0 meta oifname @local_interfaces ip saddr @from_vpn_to_localnet_ssh_v4 tcp dport { 22, 2222 } ct state new counter accept comment "forward vpn client ssh v4"
add rule inet filter forward_apprules meta iifname tun0 meta oifname @local_interfaces ip6 saddr @from_vpn_to_localnet_ssh_v6 tcp dport { 22, 2222 } ct state new counter accept comment "forward vpn client ssh v6"
add rule inet filter forward_apprules meta iifname tun0 meta oifname @local_interfaces ip saddr @from_vpn_to_localnet_music_v4 tcp dport { 1704, 1705, 1780, 6600 } ct state new counter accept comment "forward vpn client music v4"
add rule inet filter forward_apprules meta iifname tun0 meta oifname @local_interfaces ip6 saddr @from_vpn_to_localnet_music_v6 tcp dport { 1704, 1705, 1780, 6600 } ct state new counter accept comment "forward vpn client music v6"
add rule inet filter forward_apprules meta iifname tun0 meta oifname @local_interfaces ip saddr @from_vpn_to_localnet_smb_v4 ip daddr @vpn_smb_targets_v4 tcp dport { 139, 445 } ct state new counter accept comment "forward vpn client smb v4"
add rule inet filter forward_apprules meta iifname tun0 meta oifname @local_interfaces ip6 saddr @from_vpn_to_localnet_smb_v6 ip6 daddr @vpn_smb_targets_v6 tcp dport { 139, 445 } ct state new counter accept comment "forward vpn client smb v6"
add rule inet filter forward_apprules meta iifname tun0 meta oifname @local_interfaces ip saddr @from_vpn_to_localnet_imaps_v4 ip daddr @vpn_imaps_targets_v4 tcp dport { 993 } ct state new counter accept comment "forward vpn client imaps v4"
add rule inet filter forward_apprules meta iifname tun0 meta oifname @local_interfaces ip6 saddr @from_vpn_to_localnet_imaps_v6 ip6 daddr @vpn_imaps_targets_v6 tcp dport { 993 } ct state new counter accept comment "forward vpn client imaps v6"
add rule inet filter forward_apprules meta iifname tun0 meta oifname @local_interfaces ip saddr @from_vpn_to_localnet_nextcloud_v4 ip daddr @vpn_nextcloud_targets_v4 tcp dport { 443 } ct state new counter accept comment "forward vpn client nextcloud v4"
add rule inet filter forward_apprules meta iifname tun0 meta oifname @local_interfaces ip6 saddr @from_vpn_to_localnet_nextcloud_v6 ip6 daddr @vpn_nextcloud_targets_v6 tcp dport { 443 } ct state new counter accept comment "forward vpn client nextcloud v6"

# Stateful forward rules to enable some hosts or networks to use services on whitelisted vpn clients
add rule inet filter forward_apprules meta iifname @local_interfaces meta oifname tun0 ip saddr {{ openvpn_nft_nbd_source_ipv4 }} ip daddr @to_vpn_client_nbd tcp dport { 10809 } ct state new counter accept comment "forward vpn service nbd"
add rule inet filter forward_apprules meta iifname @local_interfaces meta oifname tun0                                            ip daddr @to_vpn_client_unifi tcp dport { 8443 } ct state new counter accept comment "forward local vpn service unifi"
add rule inet filter forward_apprules meta iifname tun0              meta oifname tun0 ip saddr @from_vpn_to_vpn_unifi_v4         ip daddr @to_vpn_client_unifi tcp dport { 8443 } ct state new counter accept comment "forward vpn to vpn service unifi"
