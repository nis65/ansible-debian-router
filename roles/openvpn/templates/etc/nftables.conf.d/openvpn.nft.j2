## build rules for vpn server (encrypted traffic)
# build set of vpn_outer_interfaces
add set inet filter vpn_server_interfaces { type ifname; }

{% for iface in openvpn_server_interfaces %}
add element inet filter vpn_server_interfaces { {{ iface }} }
{% endfor %}

# Stateless rules for base vpn traffic
add rule inet filter input_apprules  iifname @vpn_server_interfaces udp dport { {{ openvpn_port }} } counter accept comment "input vpn"
add rule inet filter output_apprules oifname @vpn_server_interfaces udp sport { {{ openvpn_port }} } counter accept comment "output vpn"

## build rules for vpn clients (decrypted traffic) to local services
# ALL vpn clients are reachable via ssh
add rule inet filter forward_apprules oifname tun0 tcp dport { 22, 2222 } ct state new counter accept comment "forward ssh to vpn client"

# map vpn client names (from certificates) (file is updated automatically from systemd openvpnmapping.path)
include "/etc/nftables.conf.d/clients.openvpn"

# sets for selected targets in local networks
add set inet filter smb_targets { type ipv4_addr ; }
add set inet filter imaps_targets { type ipv4_addr ; }
{% for ip in openvpn_nft_targets_smb %}
add element inet filter smb_targets { {{ ip }} }
{% endfor %}
{% for ip in openvpn_nft_targets_imaps %}
add element inet filter imaps_targets { {{ ip }} }
{% endfor %}

# create empty source IP sets for all rules
add set inet filter from_vpn_to_localhost_dns { type ipv4_addr ; }
add set inet filter from_vpn_to_localhost_ssh { type ipv4_addr ; }
add set inet filter from_vpn_to_localhost_unifi { type ipv4_addr ; }
add set inet filter from_vpn_to_localnet_ssh { type ipv4_addr ; }
add set inet filter from_vpn_to_localnet_smb { type ipv4_addr ; }
add set inet filter from_vpn_to_localnet_music { type ipv4_addr ; }
add set inet filter from_vpn_to_localnet_imaps { type ipv4_addr ; }
# not yet implemented
#add set inet filter from_vpn_to_localnet_nbd { type ipv4_addr ; }
#add set inet filter from_vpn_to_localnet_sip { type ipv4_addr ; }
#add set inet filter from_vpn_to_localnet_ldap { type ipv4_addr ; }

# map client names to the host sets for the service specific rules

{% for ruleset in openvpn_nft_client_rules %}
{% for clientname in ruleset.clients %}
add element inet filter from_vpn_to_{{ ruleset.name }} { ${{ clientname }}_v4 }
{% endfor %}
{% endfor %}

# Stateful input rule to enable whitelisted vpn clients to use the localhost services
add rule inet filter input_apprules iifname tun0 ip saddr @from_vpn_to_localhost_dns udp dport { 53 } ct state new counter accept comment "input vpn client dns udp"
add rule inet filter input_apprules iifname tun0 ip saddr @from_vpn_to_localhost_dns tcp dport { 53 } ct state new counter accept comment "input vpn client dns tcp"
add rule inet filter input_apprules iifname tun0 ip saddr @from_vpn_to_localhost_ssh tcp dport { 22 } ct state new counter accept comment "input vpn client ssh tcp"
add rule inet filter input_apprules iifname tun0 ip saddr @from_vpn_to_localhost_unifi tcp dport { 8443 } ct state new counter accept comment "input vpn client unifi udp"
# Stateful forward rules to enable whitelisted vpn clients to use services on localnets
add rule inet filter forward_apprules iifname tun0 oifname @local_interfaces ip saddr @from_vpn_to_localnet_ssh tcp dport { 22, 2222 } ct state new counter accept comment "forward vpn client ssh"
add rule inet filter forward_apprules iifname tun0 oifname @local_interfaces ip saddr @from_vpn_to_localnet_music tcp dport { 1704, 1705, 1780, 6600 } ct state new counter accept comment "forward vpn client music"
add rule inet filter forward_apprules iifname tun0 oifname @local_interfaces ip saddr @from_vpn_to_localnet_smb ip daddr @smb_targets tcp dport { 139, 445 } ct state new counter accept comment "forward vpn client smb"
add rule inet filter forward_apprules iifname tun0 oifname @local_interfaces ip saddr @from_vpn_to_localnet_imaps ip daddr @imaps_targets tcp dport { 993 } ct state new counter accept comment "forward vpn client imaps"



